(()=>{"use strict";var __webpack_modules__={984:()=>{eval('\n;// CONCATENATED MODULE: ../common/ipc.js\nclass IPC {\n  constructor(context) {\n    if (!context) throw new Error("Context is required");\n    this.context = context;\n  }\n\n  createHash() {\n    return Math.random().toString(36).substr(2, 10);\n  }\n\n  reply(message, data) {\n    this.send(message.event + "-reply", data, void 0, message.hash);\n  }\n\n  on(event, listener, once = false) {\n    const wrappedListener = message => {\n      if (message.data.event !== event || message.data.context === this.context) return;\n      const returnValue = listener(message.data, message.data.data);\n\n      if (returnValue == true && once) {\n        window.removeEventListener("message", wrappedListener);\n      }\n    };\n\n    window.addEventListener("message", wrappedListener);\n  }\n\n  send(event, data, callback = null, hash) {\n    if (!hash) hash = this.createHash();\n\n    if (callback) {\n      this.on(event + "-reply", message => {\n        if (message.hash === hash) {\n          callback(message.data);\n          return true;\n        }\n\n        return false;\n      }, true);\n    }\n\n    window.postMessage({\n      source: "betterdiscord-browser-" + this.context,\n      event: event,\n      context: this.context,\n      hash: hash,\n      data\n    });\n  }\n\n}\n;\n;// CONCATENATED MODULE: ../common/constants.js\nconst IPCEvents = {\n  INJECT_CSS: "bdbrowser-inject-css",\n  MAKE_REQUESTS: "bdbrowser-make-requests"\n};\n;// CONCATENATED MODULE: ../common/dom.js\nclass DOM {\n  /**@returns {HTMLElement} */\n  static createElement(type, options = {}, ...children) {\n    const node = document.createElement(type);\n    Object.assign(node, options);\n\n    for (const child of children) {\n      node.append(child);\n    }\n\n    return node;\n  }\n\n  static injectCSS(id, css) {\n    const style = this.createElement("style", {\n      id: id,\n      type: "text/css",\n      innerHTML: css\n    });\n    this.headAppend(style);\n  }\n\n  static removeCSS(id) {\n    const style = document.querySelector("style#" + id);\n\n    if (style) {\n      style.remove();\n    }\n  }\n\n  static injectJS(id, src, silent = true) {\n    const script = this.createElement("script", {\n      id: id,\n      type: "text/javascript",\n      src: src\n    });\n    this.headAppend(script);\n    if (silent) script.addEventListener("load", () => {\n      script.remove();\n    }, {\n      once: true\n    });\n  }\n\n}\nDOM.headAppend = document.head.append.bind(document.head);\n;// CONCATENATED MODULE: ../common/logger.js\nclass Logger {\n  static _parseType(type) {\n    switch (type) {\n      case "info":\n      case "warn":\n      case "error":\n        return type;\n\n      default:\n        return "log";\n    }\n  }\n\n  static _log(type, module, ...nessage) {\n    type = this._parseType(type);\n    console[type](`%c[BetterDiscord]%c %c[${module}]%c`, "color: #3E82E5; font-weight: 700;", "", "color: #396CB8", "", ...nessage);\n  }\n\n  static log(module, ...message) {\n    this._log("log", module, ...message);\n  }\n\n  static info(module, ...message) {\n    this._log("info", module, ...message);\n  }\n\n  static warn(module, ...message) {\n    this._log("warn", module, ...message);\n  }\n\n  static error(module, ...message) {\n    this._log("error", module, ...message);\n  }\n\n}\n;// CONCATENATED MODULE: ./src/index.js\n\n\n\n\nLogger.log("Backend", "Initializing modules");\nconst ipcMain = new IPC("backend");\nLogger.log("Backend", "Registering events");\nipcMain.on(IPCEvents.INJECT_CSS, (_, data) => {\n  DOM.injectCSS(data.id, data.css);\n});\nipcMain.on(IPCEvents.MAKE_REQUESTS, (event, data) => {\n  fetch(data.url).catch(console.error.bind(null, "REQUEST FAILED:")).then(res => res.text()).then(text => {\n    ipcMain.reply(event, text);\n  });\n});\n\nconst SCRIPT_URL = (() => {\n  switch ("production") {\n    case "production":\n      return "https://strencher.github.io/BdBrowser/dist/frontend.js";\n\n    case "development":\n      return "http://127.0.0.1:5500/frontend.js";\n\n    default:\n      throw new Error("Unknown Environment");\n  }\n})();\n\nLogger.log("Backend", "Loading frontend script from", SCRIPT_URL);\nDOM.injectJS("BetterDiscordBrowser-frontend", SCRIPT_URL, false);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTg0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL2NvbW1vbi9pcGMuanM/NDkzZSIsIndlYnBhY2s6Ly8vLi4vY29tbW9uL2NvbnN0YW50cy5qcz83MTA1Iiwid2VicGFjazovLy8uLi9jb21tb24vZG9tLmpzPzBmNGIiLCJ3ZWJwYWNrOi8vLy4uL2NvbW1vbi9sb2dnZXIuanM/MmZhOSIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanM/ZmE2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBJUEMge1xuICBjb25zdHJ1Y3Rvcihjb250ZXh0KSB7XG4gICAgaWYgKCFjb250ZXh0KSB0aHJvdyBuZXcgRXJyb3IoXCJDb250ZXh0IGlzIHJlcXVpcmVkXCIpO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICBjcmVhdGVIYXNoKCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgMTApO1xuICB9XG5cbiAgcmVwbHkobWVzc2FnZSwgZGF0YSkge1xuICAgIHRoaXMuc2VuZChtZXNzYWdlLmV2ZW50ICsgXCItcmVwbHlcIiwgZGF0YSwgdm9pZCAwLCBtZXNzYWdlLmhhc2gpO1xuICB9XG5cbiAgb24oZXZlbnQsIGxpc3RlbmVyLCBvbmNlID0gZmFsc2UpIHtcbiAgICBjb25zdCB3cmFwcGVkTGlzdGVuZXIgPSBtZXNzYWdlID0+IHtcbiAgICAgIGlmIChtZXNzYWdlLmRhdGEuZXZlbnQgIT09IGV2ZW50IHx8IG1lc3NhZ2UuZGF0YS5jb250ZXh0ID09PSB0aGlzLmNvbnRleHQpIHJldHVybjtcbiAgICAgIGNvbnN0IHJldHVyblZhbHVlID0gbGlzdGVuZXIobWVzc2FnZS5kYXRhLCBtZXNzYWdlLmRhdGEuZGF0YSk7XG5cbiAgICAgIGlmIChyZXR1cm5WYWx1ZSA9PSB0cnVlICYmIG9uY2UpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIHdyYXBwZWRMaXN0ZW5lcik7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCB3cmFwcGVkTGlzdGVuZXIpO1xuICB9XG5cbiAgc2VuZChldmVudCwgZGF0YSwgY2FsbGJhY2sgPSBudWxsLCBoYXNoKSB7XG4gICAgaWYgKCFoYXNoKSBoYXNoID0gdGhpcy5jcmVhdGVIYXNoKCk7XG5cbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMub24oZXZlbnQgKyBcIi1yZXBseVwiLCBtZXNzYWdlID0+IHtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaGFzaCA9PT0gaGFzaCkge1xuICAgICAgICAgIGNhbGxiYWNrKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9LCB0cnVlKTtcbiAgICB9XG5cbiAgICB3aW5kb3cucG9zdE1lc3NhZ2Uoe1xuICAgICAgc291cmNlOiBcImJldHRlcmRpc2NvcmQtYnJvd3Nlci1cIiArIHRoaXMuY29udGV4dCxcbiAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dCxcbiAgICAgIGhhc2g6IGhhc2gsXG4gICAgICBkYXRhXG4gICAgfSk7XG4gIH1cblxufVxuOyIsImV4cG9ydCBjb25zdCBJUENFdmVudHMgPSB7XG4gIElOSkVDVF9DU1M6IFwiYmRicm93c2VyLWluamVjdC1jc3NcIixcbiAgTUFLRV9SRVFVRVNUUzogXCJiZGJyb3dzZXItbWFrZS1yZXF1ZXN0c1wiXG59OyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIERPTSB7XG4gIC8qKkByZXR1cm5zIHtIVE1MRWxlbWVudH0gKi9cbiAgc3RhdGljIGNyZWF0ZUVsZW1lbnQodHlwZSwgb3B0aW9ucyA9IHt9LCAuLi5jaGlsZHJlbikge1xuICAgIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgIE9iamVjdC5hc3NpZ24obm9kZSwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XG4gICAgICBub2RlLmFwcGVuZChjaGlsZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICBzdGF0aWMgaW5qZWN0Q1NTKGlkLCBjc3MpIHtcbiAgICBjb25zdCBzdHlsZSA9IHRoaXMuY3JlYXRlRWxlbWVudChcInN0eWxlXCIsIHtcbiAgICAgIGlkOiBpZCxcbiAgICAgIHR5cGU6IFwidGV4dC9jc3NcIixcbiAgICAgIGlubmVySFRNTDogY3NzXG4gICAgfSk7XG4gICAgdGhpcy5oZWFkQXBwZW5kKHN0eWxlKTtcbiAgfVxuXG4gIHN0YXRpYyByZW1vdmVDU1MoaWQpIHtcbiAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzdHlsZSNcIiArIGlkKTtcblxuICAgIGlmIChzdHlsZSkge1xuICAgICAgc3R5bGUucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGluamVjdEpTKGlkLCBzcmMsIHNpbGVudCA9IHRydWUpIHtcbiAgICBjb25zdCBzY3JpcHQgPSB0aGlzLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIiwge1xuICAgICAgaWQ6IGlkLFxuICAgICAgdHlwZTogXCJ0ZXh0L2phdmFzY3JpcHRcIixcbiAgICAgIHNyYzogc3JjXG4gICAgfSk7XG4gICAgdGhpcy5oZWFkQXBwZW5kKHNjcmlwdCk7XG4gICAgaWYgKHNpbGVudCkgc2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgIHNjcmlwdC5yZW1vdmUoKTtcbiAgICB9LCB7XG4gICAgICBvbmNlOiB0cnVlXG4gICAgfSk7XG4gIH1cblxufVxuRE9NLmhlYWRBcHBlbmQgPSBkb2N1bWVudC5oZWFkLmFwcGVuZC5iaW5kKGRvY3VtZW50LmhlYWQpOyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIExvZ2dlciB7XG4gIHN0YXRpYyBfcGFyc2VUeXBlKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJpbmZvXCI6XG4gICAgICBjYXNlIFwid2FyblwiOlxuICAgICAgY2FzZSBcImVycm9yXCI6XG4gICAgICAgIHJldHVybiB0eXBlO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gXCJsb2dcIjtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgX2xvZyh0eXBlLCBtb2R1bGUsIC4uLm5lc3NhZ2UpIHtcbiAgICB0eXBlID0gdGhpcy5fcGFyc2VUeXBlKHR5cGUpO1xuICAgIGNvbnNvbGVbdHlwZV0oYCVjW0JldHRlckRpc2NvcmRdJWMgJWNbJHttb2R1bGV9XSVjYCwgXCJjb2xvcjogIzNFODJFNTsgZm9udC13ZWlnaHQ6IDcwMDtcIiwgXCJcIiwgXCJjb2xvcjogIzM5NkNCOFwiLCBcIlwiLCAuLi5uZXNzYWdlKTtcbiAgfVxuXG4gIHN0YXRpYyBsb2cobW9kdWxlLCAuLi5tZXNzYWdlKSB7XG4gICAgdGhpcy5fbG9nKFwibG9nXCIsIG1vZHVsZSwgLi4ubWVzc2FnZSk7XG4gIH1cblxuICBzdGF0aWMgaW5mbyhtb2R1bGUsIC4uLm1lc3NhZ2UpIHtcbiAgICB0aGlzLl9sb2coXCJpbmZvXCIsIG1vZHVsZSwgLi4ubWVzc2FnZSk7XG4gIH1cblxuICBzdGF0aWMgd2Fybihtb2R1bGUsIC4uLm1lc3NhZ2UpIHtcbiAgICB0aGlzLl9sb2coXCJ3YXJuXCIsIG1vZHVsZSwgLi4ubWVzc2FnZSk7XG4gIH1cblxuICBzdGF0aWMgZXJyb3IobW9kdWxlLCAuLi5tZXNzYWdlKSB7XG4gICAgdGhpcy5fbG9nKFwiZXJyb3JcIiwgbW9kdWxlLCAuLi5tZXNzYWdlKTtcbiAgfVxuXG59IiwiaW1wb3J0IElQQyBmcm9tIFwiY29tbW9uL2lwY1wiO1xuaW1wb3J0IHsgSVBDRXZlbnRzIH0gZnJvbSBcImNvbW1vbi9jb25zdGFudHNcIjtcbmltcG9ydCBET00gZnJvbSBcImNvbW1vbi9kb21cIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcImNvbW1vbi9sb2dnZXJcIjtcbkxvZ2dlci5sb2coXCJCYWNrZW5kXCIsIFwiSW5pdGlhbGl6aW5nIG1vZHVsZXNcIik7XG5jb25zdCBpcGNNYWluID0gbmV3IElQQyhcImJhY2tlbmRcIik7XG5Mb2dnZXIubG9nKFwiQmFja2VuZFwiLCBcIlJlZ2lzdGVyaW5nIGV2ZW50c1wiKTtcbmlwY01haW4ub24oSVBDRXZlbnRzLklOSkVDVF9DU1MsIChfLCBkYXRhKSA9PiB7XG4gIERPTS5pbmplY3RDU1MoZGF0YS5pZCwgZGF0YS5jc3MpO1xufSk7XG5pcGNNYWluLm9uKElQQ0V2ZW50cy5NQUtFX1JFUVVFU1RTLCAoZXZlbnQsIGRhdGEpID0+IHtcbiAgZmV0Y2goZGF0YS51cmwpLmNhdGNoKGNvbnNvbGUuZXJyb3IuYmluZChudWxsLCBcIlJFUVVFU1QgRkFJTEVEOlwiKSkudGhlbihyZXMgPT4gcmVzLnRleHQoKSkudGhlbih0ZXh0ID0+IHtcbiAgICBpcGNNYWluLnJlcGx5KGV2ZW50LCB0ZXh0KTtcbiAgfSk7XG59KTtcblxuY29uc3QgU0NSSVBUX1VSTCA9ICgoKSA9PiB7XG4gIHN3aXRjaCAoRU5WKSB7XG4gICAgY2FzZSBcInByb2R1Y3Rpb25cIjpcbiAgICAgIHJldHVybiBcImh0dHBzOi8vc3RyZW5jaGVyLmdpdGh1Yi5pby9CZEJyb3dzZXIvZGlzdC9mcm9udGVuZC5qc1wiO1xuXG4gICAgY2FzZSBcImRldmVsb3BtZW50XCI6XG4gICAgICByZXR1cm4gXCJodHRwOi8vMTI3LjAuMC4xOjU1MDAvZnJvbnRlbmQuanNcIjtcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIEVudmlyb25tZW50XCIpO1xuICB9XG59KSgpO1xuXG5Mb2dnZXIubG9nKFwiQmFja2VuZFwiLCBcIkxvYWRpbmcgZnJvbnRlbmQgc2NyaXB0IGZyb21cIiwgU0NSSVBUX1VSTCk7XG5ET00uaW5qZWN0SlMoXCJCZXR0ZXJEaXNjb3JkQnJvd3Nlci1mcm9udGVuZFwiLCBTQ1JJUFRfVVJMLCBmYWxzZSk7Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ25EQTtBQUNBO0FBQ0E7QUFDQTs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNsQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///984\n')}},__webpack_exports__={};__webpack_modules__[984]()})();